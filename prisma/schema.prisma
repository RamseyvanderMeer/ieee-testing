// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

model Post {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  content   String  @db.VarChar(255)
  authorId  String

  @@index([authorId])
}

enum Role {
   USER
   ADMIN
 }

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role Role @default(USER)
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum Catagory {
    CORPERATE
    SOCIAL
    TECHNICAL
    OTHER
}
model Event {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt @default(now())
  date        DateTime @default(now())
  name        String   @db.VarChar(255)
  description String   @db.VarChar(255)
  code        String   @db.VarChar(255) @default(cuid())
  links       String[] @default([])
  catagory    Catagory @default(OTHER)
  images      String[] @default(["https://ik.imagekit.io/ramseyv/bkck4iiutrtfiwozjdvo.png?updatedAt=1682371572533"])
  tags        String[] @default([])
  attendees   String[] @default([])
  published   Boolean  @default(false)

  authorId  String

  @@index([authorId])
}

model Poll {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @db.VarChar(255)
  authorId  String
  options   String[]
  responses Int[]

  @@index([authorId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  content   String   @db.VarChar(255)
  authorId  String
  postId    String
  eventId   String

  @@index([authorId])
  @@index([postId])
  @@index([eventId])
}

model Vote {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    String
  eventId   String

  @@index([authorId])
  @@index([postId])
  @@index([eventId])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    String
  eventId   String

  @@index([authorId])
  @@index([postId])
  @@index([eventId])
}

model Bookmark {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String
  postId    String
  eventId   String

  @@index([authorId])
  @@index([postId])
  @@index([eventId])
}
